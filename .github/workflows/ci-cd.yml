name: CI/CD

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run Go tests
        working-directory: services/ingest-api
        run: go test ./...

      - name: Install Conftest
        run: go install github.com/open-policy-agent/conftest@latest
        env:
          GOBIN: /usr/local/bin

      - name: Validate Rego policies
        run: conftest test policy/

      - name: Build and push images
        run: |
          for dir in services/*; do
            if [ -f "$dir/Dockerfile" ]; then
              svc=$(basename "$dir")
              docker buildx build "$dir" --tag ghcr.io/${{ github.repository_owner }}/$svc:${{ github.sha }} --push
            fi
          done

      - name: Run unit tests
        run: |
          for dir in services/*; do
            if [ -d "$dir" ]; then
              if [ -f "$dir/package.json" ]; then
                npm --prefix "$dir" test
              elif [ -d "$dir/tests" ]; then
                pytest "$dir"
              fi
            fi
          done

      - name: Submit Katib experiment
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          kubectl apply -f katib/experiment.yaml
          kubectl wait --for=condition=Succeeded experiment/training-pipeline-random-forest --timeout=2h || true
          kubectl get experiment/training-pipeline-random-forest -o jsonpath='{.status.currentOptimalTrial.parameterAssignments}' > katib-best-params.json
          cat katib-best-params.json

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install argocd-image-updater
        run: |
          curl -sSL https://github.com/argoproj-labs/argocd-image-updater/releases/latest/download/argocd-image-updater-linux-amd64 -o argocd-image-updater
          chmod +x argocd-image-updater

      - name: Run argocd-image-updater
        env:
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: ./argocd-image-updater
